<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Streaming Room</title>
    <script>
        const ROOM_ID = "<%= roomId %>";
        const USER_ID = "<%= username %>";
    </script>
    <script defer src="https://unpkg.com/peerjs@1.5.4/dist/peerjs.min.js"></script>
    <script src="/socket.io/socket.io.js" defer></script>
    <script src="script.js" defer></script>
    <style>
        /* Add your styles here */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Poppins', sans-serif;
        }
        .header {
            width: 100%;
            height: 100vh;
            background: #00122e;
            position: relative;
        }
        nav {
            position: absolute;
            top: 0;
            left: 0;
            bottom: 0;
            background: #182842;
            width: 120px;
            padding: 10px 0;
        }
        nav .logo {
            width: 56px;
            display: block;
            margin: auto;
            cursor: pointer;
        }
        nav ul {
            margin-top: 160px;
        }
        nav ul li {
            list-style: none;
        }
        nav ul li img {
            width: 50px;
            display: block;
            margin: 10px auto;
            padding: 10px;
            cursor: pointer;
            opacity: 0.5;
            border-radius: 10px;
            transition: opacity 0.5s, background 0.5s;
        }
        nav ul li img:hover {
            opacity: 1;
            background: #4d6181;
        }
        .active {
            opacity: 1;
            background: #4d6181;
        }
        .container {
            margin-left: 120px;
            padding: 0 2.5%;
        }
        .top-icons {
            display: flex;
            align-items: center;
            justify-content: flex-end;
            padding: 25px 0;
        }
        .top-icons img {
            width: 25px;
            margin-left: 40px;
            cursor: pointer;
        }
        .row {
            margin-top: 15px;
            display: flex;
            justify-content: space-between;
        }
        .col-1 {
            flex-basis: 65%;
        }
        .col-2 {
            flex-basis: 33%;
        }
        .host-img {
            width: 100%;
            border-radius: 15px;
        }
        .controls {
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .controls img {
            width: 40px;
            margin: 20px 10px;
            cursor: pointer;
            transition: transform 0.5s;
        }
        .controls .call-icon {
            width: 70px;
        }
        .controls img:hover {
            transform: translateY(-10px);
        }
        .joined {
            background: #182842;
            border-radius: 15px;
            padding: 30px 40px 50px;
            color: #fff;
        }
        .joined div {
            margin-top: 20px;
            display: grid;
            grid-template-columns: auto auto auto;
            grid-gap: 20px;
        }
        .joined img {
            width: 100%;
            border-radius: 10px;
            cursor: pointer;
        }
        .invite {
            background: #182842;
            border-radius: 15px;
            padding: 30px 40px 50px;
            color: #fff;
            margin-top: 20px;
        }
        .invite img {
            margin-top: 20px;
            width: 50px;
            margin-left: 5px;
            border-radius: 50%;
            cursor: pointer;
        }
        #video-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, 300px);
            grid-auto-rows: 300px;
            margin-top: 20px;
        }
        video {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        .chat-container {
            display: none; /* Hide chat container by default */
            position: fixed;
            bottom: 0;
            right: 0;
            width: 300px;
            height: 400px;
            border: 1px solid #ccc;
            background-color: white;
            z-index: 1000;
        }
        .chat-header {
            background-color: blueviolet;
            color: white;
            padding: 10px;
            text-align: center;
        }
        .chat-messages {
            height: 300px;
            overflow-y: scroll;
            padding: 10px;
        }
        .chat-input {
            display: flex;
            padding: 10px;
        }
        .chat-input input {
            flex: 1;
            padding: 10px;
            margin-right: 10px;
        }
        .chat-input button {
            padding: 10px;
            background-color: blueviolet;
            color: white;
            border: none;
        }
        /* Style for screen share button */
.controls #share-screen {
    width: 40px;
    margin: 20px 10px;
    cursor: pointer;
    transition: transform 0.5s;
}

.controls #share-screen:hover {
    transform: translateY(-10px);
}

/* Style for screen share video */
video.screen {
    border: 2px solid #7289da; /* Visual distinction for shared screen */
    border-radius: 8px;
    margin-bottom: 10px;
}

    </style>
</head>
<body>
    <div class="header">
        <nav>
            <img src="https://i.postimg.cc/Sx0ZGtQJ/logo.png" class="logo">
            <ul>
                <li><img src="https://i.postimg.cc/L8zxQBhv/live.png" class="active"></li>
                <li><img src="https://i.postimg.cc/JnggC78Q/video.png"></li>
                <li><img src="https://i.postimg.cc/vmb3JgVy/message.png"></li>
                <li><img src="https://i.postimg.cc/qR7Q7PwZ/notification.png"></li>
                <li><img src="https://i.postimg.cc/k4DZH604/users.png"></li>
                <li><img src="https://i.postimg.cc/v84Fqkyz/setting.png"></li>
            </ul>
        </nav>
        <div class="container">
            <div class="top-icons">
                <img src="https://i.postimg.cc/cCpcXrSV/search.png">
                <img src="https://i.postimg.cc/Pqy2TXWw/menu.png">
            </div>
            <div class="row">
                <div class="col-1">
                    <div id="video-grid"></div>
                    <div class="controls">
                        <img src="https://i.postimg.cc/R0cg5D1t/mic.png" id = "toggle-mic">
                        <img src = "https://i.postimg.cc/4xpdz6bP/video-icon-removebg-preview.png" id = "toggle-video">
                        <img src="https://i.postimg.cc/fyJH8G00/call.png" id="disconnect-icon">
                        <img src="https://i.postimg.cc/BQmWRXZ3/chat-icon.png" id="chat-icon">
                        <img src="https://i.postimg.cc/4NJ0pP5x/screen-share.png" id="share-screen" alt="Share Screen">

                    </div>
                </div>
                <div class="col-2">
                    <div class="joined">
                        <p>People Joined</p>
                        <div>
                            <img src="https://i.postimg.cc/WzFnG0QG/people-1.png">
                            <img src="https://i.postimg.cc/fRhGbb92/people-2.png">
                            <img src="https://i.postimg.cc/02mgxSbK/people-3.png">
                            <img src="https://i.postimg.cc/K8rd3y7Z/people-4.png">
                            <img src="https://i.postimg.cc/HWFGfzsC/people-5.png">
                        </div>
                    </div>
                    <div class="invite">
                        <p>Invite More People</p>
                        <div>
                            <img src="https://i.postimg.cc/7LHjgQXS/user-1.png">
                            <img src="https://i.postimg.cc/q71SQXZS/user-2.png">
                            <img src="https://i.postimg.cc/h4kwCGpD/user-3.png">
                            <img src="https://i.postimg.cc/GtyfL0hn/user-4.png">
                            <img src="https://i.postimg.cc/FFd8gSbC/user-5.png">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="chat-container" id="chat-container">
        <div class="chat-header">
            <h3>Chat Room</h3>
            <button id="close-chat-btn">Close</button>
        </div>
        <div id="chat-messages"></div>
        <form id="chat-form">
            <input type="text" id="chat-input" placeholder="Type your message..." autocomplete="off">
            <button type="submit">Send</button>
        </form>
    </div>
    <script>
     document.addEventListener('DOMContentLoaded', () => {
    const socket = io();
    const chatIcon = document.getElementById('chat-icon');
    const chatContainer = document.getElementById('chat-container');
    const closeChatBtn = document.getElementById('close-chat-btn');
    const chatMessages = document.getElementById('chat-messages');
    const chatForm = document.getElementById('chat-form');
    const chatInput = document.getElementById('chat-input');
    const shareScreenButton = document.getElementById('share-screen');
    const videoGrid = document.getElementById('video-grid');
    const myPeer = new Peer(); // Initialize PeerJS

    socket.emit('join-room', ROOM_ID, USER_ID);

    chatIcon.addEventListener('click', () => {
        chatContainer.style.display = 'block';
        chatIcon.style.display = 'none';
    });

    closeChatBtn.addEventListener('click', () => {
        chatContainer.style.display = 'none';
        chatIcon.style.display = 'block';
    });

    chatForm.addEventListener('submit', (event) => {
        event.preventDefault();
        const message = chatInput.value.trim();
        if (message) {
            socket.emit('chat-message', { user: USER_ID, message });
            chatInput.value = '';
        }
    });

    socket.on('chat-message', (msg) => {
        const messageElement = document.createElement('div');
        messageElement.textContent = `${msg.user}: ${msg.message}`;
        chatMessages.appendChild(messageElement);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    });

    shareScreenButton.addEventListener('click', async () => {
        try {
            const stream = await navigator.mediaDevices.getDisplayMedia({
                video: {
                    cursor: "always"
                },
                audio: false
            });
            handleStream(stream, 'screen');
        } catch (error) {
            console.error('Error sharing screen:', error);
        }
    });

    const handleStream = (stream, type = 'video') => {
        const videoElement = document.createElement('video');
        videoElement.srcObject = stream;
        videoElement.classList.add(type); // Add type class (e.g., 'screen' or 'video')
        videoElement.autoplay = true;
        videoGrid.appendChild(videoElement);

        stream.getVideoTracks()[0].addEventListener('ended', () => {
            videoElement.remove(); // Remove video element when screen sharing stops
        });

        // PeerJS and Socket.IO integration for stream sharing
        myPeer.on('call', call => {
            call.answer(stream);
            const peerVideo = document.createElement('video');
            call.on('stream', userVideoStream => {
                addVideoStream(peerVideo, userVideoStream);
            });
        });

        socket.on('user-connected', userId => {
            connectToNewUser(userId, stream);
        });

        const connectToNewUser = (userId, stream) => {
            const call = myPeer.call(userId, stream);
            const video = document.createElement('video');
            call.on('stream', userVideoStream => {
                addVideoStream(video, userVideoStream);
            });
        };

        const addVideoStream = (video, stream) => {
            video.srcObject = stream;
            video.addEventListener('loadedmetadata', () => {
                video.play();
            });
            videoGrid.appendChild(video);
        };
    };

    const disconnectIcon = document.getElementById('disconnect-icon');
    disconnectIcon.addEventListener('click', () => {
        const videoGrid = document.getElementById('video-grid');
        videoGrid.querySelectorAll('video').forEach(video => {
            video.srcObject.getTracks().forEach(track => track.stop());
        });

        if (myPeer) {
            myPeer.destroy();
        }

        window.location.href = '/';
    });
});

    </script>
</body>
</html>
