
<% if (!jwtToken) { %> 
    <script>
        window.location.href = '/login';
    </script>
<% } %>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Chat Room</title>
    <script>
        const ROOM_ID = "<%= roomId %>";
        const USER_ID = "<%= email %>";
    </script>
    <script defer src="https://unpkg.com/peerjs@1.5.4/dist/peerjs.min.js"></script>
    <script src="/socket.io/socket.io.js" defer></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
        }

        body {
            background: #0f172a;
            color: white;
        }

        .main-container {
            padding: 20px;
            height: 100vh;
            display: flex;
            flex-direction: column;
        }

        #video-grid {
            flex-grow: 1;
            display: grid;
            gap: 1rem;
            padding: 1rem;
            align-items: center;
            justify-content: center;
            min-height: 0;
            background: #1e293b;
            border-radius: 12px;
            position: relative;
        }

        /* Grid layouts for different participant counts */
        #video-grid.participants-1 {
            grid-template-columns: minmax(0, 1fr);
        }

        #video-grid.participants-2 {
            grid-template-columns: repeat(2, minmax(0, 1fr));
        }

        #video-grid.participants-3 {
            grid-template-columns: repeat(2, minmax(0, 1fr));
            grid-template-rows: repeat(2, minmax(0, 1fr));
        }

        #video-grid.participants-3 > :first-child {
            grid-column: 1 / -1;
        }

        #video-grid.participants-4 {
            grid-template-columns: repeat(2, minmax(0, 1fr));
            grid-template-rows: repeat(2, minmax(0, 1fr));
        }

        #video-grid.participants-5,
        #video-grid.participants-6 {
            grid-template-columns: repeat(3, minmax(0, 1fr));
            grid-template-rows: repeat(2, minmax(0, 1fr));
        }

        .video-container {
            width: 100%;
            height: 100%;
            min-height: 200px;
            position: relative;
            border-radius: 8px;
            overflow: hidden;
            background: #0f172a;
            transition: all 0.3s ease;
        }

        video {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 8px;
        }

        .video-container.pinned {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 80vw;
            height: 80vh;
            z-index: 100;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
        }

        .video-container.pinned ~ .video-container {
            position: fixed;
            right: 20px;
            width: 200px;
            height: 150px;
            z-index: 101;
        }

        .video-container.pinned ~ .video-container:nth-child(2) { top: 20px; }
        .video-container.pinned ~ .video-container:nth-child(3) { top: 190px; }
        .video-container.pinned ~ .video-container:nth-child(4) { top: 360px; }
        .video-container.pinned ~ .video-container:nth-child(5) { top: 530px; }

        .controls {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 20px;
            background: rgba(15, 23, 42, 0.8);
            padding: 15px 30px;
            border-radius: 50px;
            backdrop-filter: blur(8px);
        }

        .control-button {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            border: none;
            cursor: pointer;
            background: #334155;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }

        .control-button:hover {
            background: #475569;
        }

        .control-button.active {
            background: #dc2626;
        }

        .participant-name {
            position: absolute;
            bottom: 10px;
            left: 10px;
            background: rgba(0, 0, 0, 0.5);
            padding: 5px 10px;
            border-radius: 4px;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="main-container">
        <div id="video-grid"></div>
        <div class="controls">
            <button class="control-button" id="toggle-video">üìπ</button>
            <button class="control-button" id="toggle-audio">üé§</button>
            <button class="control-button" id="share-screen">üíª</button>
            <button class="control-button" id="leave-room" style="background: #dc2626;">‚ùå</button>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const socket = io();
            const videoGrid = document.getElementById('video-grid');
            const myPeer = new Peer();
            
            const toggleVideoBtn = document.getElementById('toggle-video');
            const toggleAudioBtn = document.getElementById('toggle-audio');
            const shareScreenBtn = document.getElementById('share-screen');
            const leaveRoomBtn = document.getElementById('leave-room');

            let myVideoStream;
            let myVideoContainer;
            const peers = {};
            let videoEnabled = true;
            let audioEnabled = true;

            const updateGridLayout = () => {
                const participantCount = videoGrid.children.length;
                videoGrid.classList.remove('participants-1', 'participants-2', 'participants-3', 
                                        'participants-4', 'participants-5', 'participants-6');
                videoGrid.classList.add(`participants-${participantCount}`);
            };

            const createVideoElement = (stream, username, isLocal = false) => {
                const videoContainer = document.createElement('div');
                videoContainer.className = 'video-container';

                const video = document.createElement('video');
                video.srcObject = stream;
                video.classList.add('video');
                video.autoplay = true;
                video.playsInline = true;
                if (isLocal) video.muted = true;

                const nameTag = document.createElement('div');
                nameTag.className = 'participant-name';
                nameTag.textContent = username;

                videoContainer.appendChild(video);
                videoContainer.appendChild(nameTag);

                // Double click to pin/unpin
                videoContainer.addEventListener('dblclick', () => {
                    const isPinned = videoContainer.classList.contains('pinned');
                    document.querySelectorAll('.video-container.pinned')
                        .forEach(container => container.classList.remove('pinned'));
                    
                    if (!isPinned) {
                        videoContainer.classList.add('pinned');
                    } else {
                        updateGridLayout();
                    }
                });

                return videoContainer;
            };

            navigator.mediaDevices.getUserMedia({
                video: true,
                audio: true
            }).then(stream => {
                myVideoStream = stream;
                myVideoContainer = createVideoElement(stream, USER_ID, true);
                videoGrid.appendChild(myVideoContainer);
                updateGridLayout();

                myPeer.on('call', call => {
                    call.answer(stream);
                    call.on('stream', userVideoStream => {
                        const existingVideo = document.querySelector(`[data-peer-id="${call.peer}"]`);
                        if (!existingVideo) {
                            const videoContainer = createVideoElement(userVideoStream, 'Remote User');
                            videoContainer.dataset.peerId = call.peer;
                            videoGrid.appendChild(videoContainer);
                            updateGridLayout();
                        }
                    });
                });

                socket.on('user-connected', userId => {
                    connectToNewUser(userId, stream);
                });
            });

            const connectToNewUser = (userId, stream) => {
                const call = myPeer.call(userId, stream);
                call.on('stream', userVideoStream => {
                    const videoContainer = createVideoElement(userVideoStream, userId);
                    videoContainer.dataset.peerId = userId;
                    videoGrid.appendChild(videoContainer);
                    updateGridLayout();
                });
                peers[userId] = call;
            };

            socket.on('user-disconnected', userId => {
                if (peers[userId]) {
                    peers[userId].close();
                }
                const videoContainer = document.querySelector(`[data-peer-id="${userId}"]`);
                if (videoContainer) {
                    videoContainer.remove();
                    updateGridLayout();
                }
            });

            myPeer.on('open', id => {
                socket.emit('join-room', ROOM_ID, id);
            });

            // Control buttons functionality
            toggleVideoBtn.addEventListener('click', () => {
                const videoTrack = myVideoStream.getVideoTracks()[0];
                videoEnabled = !videoEnabled;
                videoTrack.enabled = videoEnabled;
                toggleVideoBtn.classList.toggle('active');
            });

            toggleAudioBtn.addEventListener('click', () => {
                const audioTrack = myVideoStream.getAudioTracks()[0];
                audioEnabled = !audioEnabled;
                audioTrack.enabled = audioEnabled;
                toggleAudioBtn.classList.toggle('active');
            });

            shareScreenBtn.addEventListener('click', async () => {
                try {
                    const screenStream = await navigator.mediaDevices.getDisplayMedia({
                        video: true
                    });
                    const videoContainer = createVideoElement(screenStream, 'My Screen');
                    videoGrid.appendChild(videoContainer);
                    updateGridLayout();

                    screenStream.getVideoTracks()[0].onended = () => {
                        videoContainer.remove();
                        updateGridLayout();
                    };
                } catch (error) {
                    console.error('Error sharing screen:', error);
                }
            });

            leaveRoomBtn.addEventListener('click', () => {
                myVideoStream.getTracks().forEach(track => track.stop());
                window.location.href = '/';
            });
        });
    </script>
</body>
</html>