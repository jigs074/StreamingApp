<!-- <% if (!jwtToken) { %>
    <script>
        window.location.href = '/login'; // Redirect to login if no token exists
    </script>
<% } %>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Xynq - Upcoming Interviews</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    <style>
        /* Core Styling */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: 'Inter', sans-serif;
            background: radial-gradient(circle, #0d0d0d, #1a1a1a);
            color: #fff;
        }

        /* Header */
        .header {
            background: linear-gradient(90deg, #007BFF, #00D1FF);
            padding: 30px 20px;
            text-align: center;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
        }
        .header h1 {
            font-size: 2.5rem;
            text-transform: uppercase;
            letter-spacing: 2px;
            color: #fff;
        }

        /* Navigation */
        .nav {
            display: flex;
            justify-content: center;
            align-items: center;
            background: #1c1c1c;
            padding: 15px;
            margin-bottom: 30px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.5);
            border-radius: 8px;
        }
        .nav a {
            color: #fff;
            margin: 0 20px;
            text-decoration: none;
            font-weight: bold;
            font-size: 1rem;
            padding: 10px 15px;
            border-radius: 5px;
            transition: background 0.3s ease, color 0.3s ease;
        }
        .nav a:hover, .nav a.active {
            background: #007BFF;
            color: #fff;
        }

        /* Main Content */
        .main {
            padding: 20px;
            max-width: 1200px;
            margin: 0 auto;
        }

        /* Interview List */
        .interview-container {
            background: linear-gradient(145deg, #1e1e1e, #252525);
            padding: 25px;
            border-radius: 15px;
            box-shadow: 10px 10px 30px rgba(0, 0, 0, 0.7), -10px -10px 20px rgba(255, 255, 255, 0.05);
            margin-bottom: 30px;
        }
        .interview-container h2 {
            color: #00D1FF;
            margin-bottom: 20px;
            font-size: 1.8rem;
            text-align: center;
        }
        .interview-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
        }
        .interview-card {
            background: rgba(30, 30, 30, 0.8);
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.4);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        .interview-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 123, 255, 0.4);
        }
        .interview-card h3 {
            color: #fff;
            margin-bottom: 10px;
            font-size: 1.3rem;
        }
        .interview-card p {
            color: #ccc;
            margin-bottom: 8px;
        }
        .interview-card .time {
            color: #00D1FF;
            font-weight: bold;
        }
        .interview-card .status {
            display: inline-block;
            padding: 5px 10px;
            background: #007BFF;
            color: #fff;
            border-radius: 20px;
            font-size: 0.8rem;
            margin-top: 10px;
        }
        .interview-card::before {
            content: "\f073";
            font-family: "Font Awesome 5 Free";
            font-weight: 900;
            position: absolute;
            font-size: 5rem;
            color: rgba(255, 255, 255, 0.05);
            top: 10px;
            right: 10px;
        }
        .no-interviews {
            text-align: center;
            padding: 30px;
            color: #aaa;
            font-size: 1.2rem;
        }
        .meeting-actions {
            margin-top: 15px;
            display: flex;
            gap: 10px;
        }
        .meeting-actions button {
            padding: 8px 15px;
            background: linear-gradient(90deg, #007BFF, #00D1FF);
            color: #fff;
            border: none;
            border-radius: 20px;
            font-weight: bold;
            font-size: 0.9rem;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 3px 8px rgba(0, 0, 0, 0.3);
        }
        .meeting-actions button:hover {
            background: linear-gradient(90deg, #0056b3, #007BFF);
            transform: translateY(-2px);
        }
        
        /* Loading Spinner */
        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 200px;
        }
        .spinner {
            border: 5px solid rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            border-top: 5px solid #007BFF;
            width: 50px;
            height: 50px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Error Message */
        .error-message {
            background: rgba(255, 0, 0, 0.1);
            color: #ff6b6b;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
            margin: 20px 0;
        }

        /* Footer */
        footer {
            text-align: center;
            padding: 20px;
            background: #0d0d0d;
            margin-top: 30px;
            color: #777;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Upcoming Interviews</h1>
    </div>
    <nav class="nav">
        <a href="/dashboard">Dashboard</a>
        <a href="#" class="active">Interviews</a>
        <a href="#">Candidates</a>
        <a href="#">Settings</a>
        <a href="/logout">Logout</a>
    </nav>
    <div class="main">
        <div class="interview-container">
            <h2>Your Scheduled Interviews</h2>
            <div id="interviews-content">
                <div class="loading">
                    <div class="spinner"></div>
                </div>
            </div>
        </div>
    </div>
    <footer>
        &copy; 2025 Xynq. All rights reserved.
    </footer>

    <script>
        // Function to retrieve JWT token from cookies
        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
            return null;
        }

        // Get interviewer email from JWT token
        function getInterviewerEmail() {
            const jwtToken = getCookie('jwtToken');
            if (!jwtToken) return null;
            
            try {
                // Decode the JWT payload
                const payload = JSON.parse(atob(jwtToken.split('.')[1]));
                return payload.email;
            } catch (e) {
                console.error("Error decoding JWT token:", e);
                return null;
            }
        }

        // Format date for better display
        function formatDateTime(dateTimeStr) {
            const date = new Date(dateTimeStr);
            return new Intl.DateTimeFormat('en-US', {
                weekday: 'short',
                month: 'short', 
                day: 'numeric',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            }).format(date);
        }

        // Fetch interviewer ID using email
        function fetchInterviewerId(email) {
            return fetch(`/api/interviewer?email=${encodeURIComponent(email)}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch interviewer ID');
                    }
                    return response.json();
                })
                .then(data => {
                    return data.interviewer_id;
                });
        }

        // Fetch and display interviews
        async function fetchInterviews() {
            const jwtToken = getCookie('jwtToken');
            
            if (!jwtToken) {
                window.location.href = '/login';
                return;
            }
            
            const interviewerEmail = getInterviewerEmail();
            if (!interviewerEmail) {
                document.getElementById('interviews-content').innerHTML = `
                    <div class="error-message">
                        <p>Unable to retrieve your email from the login token. Please try logging in again.</p>
                    </div>
                `;
                return;
            }
            
            try {
                // Get interviewer ID from email
                const interviewer_id = await fetchInterviewerId(interviewerEmail);
                
                if (!interviewer_id) {
                    document.getElementById('interviews-content').innerHTML = `
                        <div class="error-message">
                            <p>Unable to find an interviewer account for your email. Please contact support.</p>
                        </div>
                    `;
                    return;
                }
                
                // Fetch interviews using interviewer ID
                const response = await fetch(`/calendar?interviewer_id=${interviewer_id}`, {
                    headers: {
                        'Authorization': `Bearer ${jwtToken}`,
                        'Accept': 'application/json'
                    }
                });
                
                if (!response.ok) {
                    throw new Error('Failed to fetch interviews');
                }
                
                const data = await response.json();
                const interviewsContent = document.getElementById('interviews-content');
                
                if (!data.meetings || data.meetings.length === 0) {
                    interviewsContent.innerHTML = `
                        <div class="no-interviews">
                            <p>You have no upcoming interviews scheduled at this time.</p>
                        </div>
                    `;
                    return;
                }
                
                let htmlContent = '<div class="interview-list">';
                
                data.meetings.forEach(meeting => {
                    htmlContent += `
                        <div class="interview-card">
                            <h3>Interview with ${meeting.candidate_email.split('@')[0]}</h3>
                            <p><strong>Email:</strong> ${meeting.candidate_email}</p>
                            <p class="time">
                                <i class="fas fa-clock"></i> 
                                ${formatDateTime(meeting.time)}
                            </p>
                            <p><span class="status">${meeting.status}</span></p>
                            <div class="meeting-actions">
                                <button onclick="joinMeeting('${meeting.meeting_id}')">
                                    <i class="fas fa-video"></i> Join
                                </button>
                                <button onclick="reschedule('${meeting.meeting_id}')">
                                    <i class="fas fa-calendar-alt"></i> Reschedule
                                </button>
                            </div>
                        </div>
                    `;
                });
                
                htmlContent += '</div>';
                interviewsContent.innerHTML = htmlContent;
                
            } catch (error) {
                document.getElementById('interviews-content').innerHTML = `
                    <div class="error-message">
                        <p>${error.message}</p>
                        <p>Please try again later or contact support.</p>
                    </div>
                `;
            }
        }
        
        // Join meeting function
        function joinMeeting(meetingId) {
            window.location.href = `/room/${meetingId}`;
        }
        
        // Reschedule function
        function reschedule(meetingId) {
            // Implement your reschedule functionality here
            alert("Reschedule functionality coming soon for meeting: " + meetingId);
        }
        
        // Load interviews when the page loads
        document.addEventListener('DOMContentLoaded', fetchInterviews);
    </script>
</body>
</html> -->